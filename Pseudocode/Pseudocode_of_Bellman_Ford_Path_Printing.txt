// Pseudocode: Path Printing of Bellman Ford

Input -> A weighted graph & a src node (with no negative cycles)
Output-> Shortest distance from src node to all other nodes

n - # of nodes
m - # of edges


time complexity -> O(n*m) + O(n) = O(n*m) || O(n^3)
space complexity -> O(n) 
/*
d[u] + c(u,v) < d[v]
=> d[v] = d[v] + c(u,v)
*/

- create a distance array "d" with all values to infinity -> O(n)
- create a parent array
- d[src] = 0 -> O(1)

- negative_cycle = false
- last_updated_node = -1

- for i = 1 to n-1: -> O(n)
	- for all edge e(u,v,w): -> O(m) => O(n *  m)
		- if d[u] + w < d[v] -> O(1)
			- d[v] = d[u] + w -> O(1)
			- parent[v] = u
			- if i == n
			 	- negative_cylce = true
				- last_updated_node = v

- print whether negative cycle exists

- if negative_cycle = false
	- print the distance array "d" -> O(n) 
	- selected_node = destination_node
	- declare a vector path
	- while true: 
		- path.push_back(selected_node)
		- if selected_node = src
            	break	
		- selected_node = parent[selected_node]
	- reverse the vector path
- else: -> O(n)
	- print negative cycle exist
	- selected_node = last_updated_node
	- for i=0 to n-1: -> O(n)
		- selected_node = parent[selected_node]
	- first_node = selected_node
	- declare a vector "cycle"
	- cycle.push_back(selected_node)
	- while true: -> O(n)
		- selected_node = parent[selected_node]
		- cycle.push_back(selected_node)
		- if selected_node = last_updated_node:
			- break
	- reverse the "cycle" vector
	- print the cycle



O(n) + O(1) + O(n*m) + O(n)
=> O(n * m)
=> O(|V| + |E|)  (m = n^2)
=> O(n^3)
